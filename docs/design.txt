SimpleMas - Comprehensive Design Document (v0.2.0)
Date: April 23, 2025
Status: Proposed Design
Authors: Wilson Urdaneta <wilson.urdaneta@gmail.com>

Abstract: This document outlines the architecture and design for SimpleMas, a Pythonic ecosystem aimed at simplifying the development, structuring, integration, and deployment of Multi-Agent Systems (MAS). It covers both the core SimpleMas SDK (the foundational library) and the proposed application architecture and tooling designed to enhance the developer experience, drawing inspiration from frameworks like dbt.

Table of Contents:
Introduction & Motivation
Core Principles (Philosophy)
State of the Art & Justification
SimpleMas Ecosystem Overview
SimpleMas SDK Architecture (The Framework - v0.1.0 Foundation)
SimpleMas Application Architecture (The User Experience)
Core Concepts in Practice (Handling Variability)
CLI Tooling (simplemas CLI)

Future Considerations & Roadmap
1. Introduction & Motivation
1.1. The Problem: Developing, deploying, and maintaining Multi-Agent Systems (MAS) is complex. Key challenges include:
Integration Complexity: Connecting diverse components (LLMs, specialized engines, external APIs, databases) requires brittle, bespoke code.
Configuration Management: Handling distributed configuration securely and consistently is difficult and error-prone.
Repetitive Boilerplate: Significant code duplication occurs when setting up agent structure, communication, configuration loading, and basic service logic.
Deployment & Operations: Containerization, networking, interaction testing, and monitoring add significant overhead.
Extensibility & Reusability: Adapting systems or adding capabilities often requires substantial refactoring without a modular design.
Application Structuring: Lack of conventions makes organizing, understanding, and scaling MAS application codebases difficult.
Developer Focus: Too much time is spent on plumbing rather than core agent intelligence and logic.

1.2. Project Context: Initial motivation stems from challenges in projects like dylangames-* ChessPal and your chesspal.ai, involving orchestrators, specialized servers (MCP), and deployment complexity. The need to generalize beyond specific domains highlights the requirement for a reusable, structured approach.

1.3. Goal of SimpleMas Ecosystem: To provide a cohesive Pythonic environment that simplifies the end-to-end lifecycle of MAS development. This includes:
A thin, transparent, and extensible SDK (framework) for building individual agent components with reduced boilerplate, focusing on configuration, communication abstraction, and lifecycle management.
An opinionated application structure and conventions (inspired by dbt) to organize MAS projects, promoting modularity and understandability.
CLI tooling to scaffold projects, validate configurations, and facilitate development workflows.
Mechanisms for local and potentially external extensibility without modifying the core SDK.
Ultimately, allowing developers to focus on agent logic and MAS design, rather than foundational plumbing and project organization challenges.

2. Core Principles (Philosophy)
Simplicity & Composability: Favor simple, understandable components. Provide building blocks, avoid opaque magic.
Transparency: Ensure component interactions (especially communication) are reasonably clear to aid debugging.
Modularity & Pluggability: Design for extension (especially communication backends). Foster an ecosystem.
Pragmatism: Focus initially on solving the most pressing pain points (config, communication abstraction, boilerplate reduction, application structure).
Protocol Support (MCP First, Pluggable): Excellent MCP support is primary, but the architecture must support other protocols (HTTP, gRPC, MQ) via pluggable communicators.
Agent Reasoning Agnosticism: The SDK provides the agent's "body" (structure, communication), not its "brain" (reasoning). Supports various internal logic implementations.
Separation of Concerns:
SDK: Manages core agent abstractions (BaseAgent, Communicator), lifecycle, config loading interface.
Application Structure: Organizes developer code (agents/, shared/, extensions/), project config (simplemas_project.yml).
Deployment Tools: Handle containerization, networking, runtime config injection (e.g., Docker Compose, Kubernetes, potentially aided by a simplemas-deploy tool).

3. State of the Art & Justification
Existing Frameworks:
MCP-Focused (mcp-agent, fast-agent, ADK): Strong on MCP client/workflow patterns, less on MCP server creation or broader protocol/structure needs.
BDI Frameworks (spade-bdi, MASPY): Focus on specific internal reasoning models.
Justification for SimpleMas: Fills a gap by providing a thin, flexible foundation that simplifies building both clients and servers (especially MCP), offers pluggable communication for diverse protocols, remains agnostic to reasoning models, and crucially, introduces a standardized application structure and tooling for better project organization and developer experience, inspired by dbt's success.

4. SimpleMas Ecosystem Overview
The SimpleMas ecosystem consists of two primary parts working together:
SimpleMas SDK (The Framework):
The core Python library (pip install simplemas).
Provides fundamental building blocks: BaseAgent, BaseCommunicator implementations, configuration loading utilities, standard exceptions.
Imported and used by developers within their agent code.
Focus: Reducing boilerplate for individual agent components, providing abstractions.
SimpleMas Application Architecture & Tooling (The User Experience):
A set of conventions and tools for structuring a complete MAS project.
Defines a standard directory layout (agents/, shared/, extensions/, etc.).
Includes a central project configuration file (simplemas_project.yml).
Provides a CLI tool (simplemas) for initializing projects, validation, etc.
Focus: Organizing the overall application, promoting modularity, enabling local extensions, simplifying configuration management, and improving developer workflow.

5. SimpleMas SDK Architecture (The Framework - v0.1.0 Foundation)

5.1. Core Components:
BaseAgent (simplemas.agent):
Fundamental class inherited by all SimpleMas components.
Handles initialization boilerplate: loads config via simplemas.config, instantiates configured Communicator.
Provides self.name, self.config, self.communicator.
Defines standard async lifecycle methods: setup(), run(), shutdown(). run() contains the component's main logic loop.
Configuration (simplemas.config):
Provides load_config(): Standardized function to load agent settings.
Primary source: Environment variables (e.g., AGENT_NAME, COMMUNICATOR_TYPE, SERVICE_URLS, AGENT_PORT, custom params). Easily injected in containerized environments.
Uses Pydantic for validation and type-safe access (self.config).
Can be extended to support layered config (see Section 6.3).
Communicator (simplemas.communication):
BaseCommunicator (ABC): Abstract interface defining methods like send_request(), send_notification(), register_handler(), start(), stop(). Key pluggability point.
Initial Implementations: HttpCommunicator (using httpx). Future: McpStdioCommunicator, McpSseCommunicator, GrpcCommunicator, MessageQueueCommunicator.
Instantiated by BaseAgent based on configuration (config.communicator_type).
Exceptions (simplemas.exceptions): Custom exceptions (SimpleMasError, ConfigurationError, CommunicationError) for consistent error handling.

5.2. Key Abstractions & Benefits:
Unified Base: Common starting point (BaseAgent) reduces boilerplate.
Simplified Setup & Config: Standardized initialization and configuration access.
Decoupled Communication: Communicator abstracts protocol details, allowing agent logic to be cleaner and protocols swappable/added. Agents use logical service names resolved via config.
Testability: Clear interfaces facilitate mocking (e.g., MockCommunicator).

5.3. Relationship to BDI & Workflows:
The SDK is agnostic. It provides the foundation (structure, communication, lifecycle) upon which various reasoning models (like BDI using external libraries) and workflow patterns (like Orchestrator-Worker) can be implemented within BaseAgent subclasses. Optional SDK helpers (simple_mas.patterns, simple_mas.integrations) can facilitate these but are not core requirements.

6. SimpleMas Application Architecture (The User Experience)
This defines how developers structure their MAS projects using the SimpleMas SDK, inspired by dbt.

6.1. Standard Directory Structure: Generated by simplemas init:
your_mas_project_name/
├── agents/                 # Code for individual agents
│   ├── <agent_name_1>/
│   │   ├── agent.py        # BaseAgent subclass implementation
│   │   ├── requirements.txt # Optional: Agent-specific deps
│   │   └── simplemas.deploy.yaml # Deployment metadata
│   └── <agent_name_2>/ ...
├── shared/                 # Shared Python code within this project (utils, models)
├── extensions/             # Project-local SimpleMas extensions (custom communicators, patterns, base agents)
├── config/                 # Optional: Environment-specific config files (e.g., default.yml, production.yml)
├── tests/                  # Application-level integration tests
├── simplemas_project.yml   # Central project configuration
├── requirements.txt        # Top-level project dependencies (incl. simplemas SDK)
└── README.md


6.2. Central Configuration (simplemas_project.yml):
Defines the MAS application structure and metadata.
Contents:
name: Project name.
version: Project version.
agents: Mapping of logical agent names to their directory paths (e.g., orchestrator: agents/orchestrator).
shared_paths: List of directories containing shared code.
extension_paths: List of directories containing project-local extensions. The SDK runtime will be configured to look for modules/classes here.
default_config: Optional default parameters (lowest precedence).
(Future) dependencies: List of external SimpleMas packages.

6.3. Configuration Layering Strategy: Settings are resolved in the following order (higher precedence overrides lower):
SimpleMas SDK Internal Defaults.
default_config section in simplemas_project.yml.
Environment-specific YAML files in config/ (e.g., config/production.yml, selected via SIMPLEMAS_ENV env var). Note: SDK load_config needs enhancement for this.
Environment Variables: Read directly by simplemas.config.load_config. This is the primary way to inject runtime secrets, service URLs, ports, and agent-specific parameters in deployment.

6.4. Local Extensibility (extensions/):
Allows developers to define custom BaseCommunicator subclasses, specialized BaseAgent types, reusable patterns, etc., specific to their project without modifying the installed simplemas SDK.
The SDK's dynamic loading mechanisms (e.g., for communicators via config.communicator_type, or potentially for base agent types) will be configured via simplemas_project.yml (extension_paths) to search these directories using Python's import system (sys.path manipulation or importlib).

7. Core Concepts in Practice (Handling Variability)
The combination of the SDK and Application Architecture handles diversity:
Workflow Types (Orchestrator, Chain, etc.):
Implemented primarily as code within specific agent (agent.py) run methods.
Optional SDK helpers (simple_mas.patterns) can be used.
Configured via agent parameters (e.g., target worker names in SERVICE_URLS).
Project-specific reusable patterns can live in extensions/.
Protocols (HTTP, MCP, gRPC, MQ):
Outgoing: Selected via agent config (COMMUNICATOR_TYPE=...) which tells BaseAgent which Communicator class (from SDK or extensions/) to instantiate.
Incoming: Implemented by the agent starting a server (e.g., FastAPI, gRPC server, MCP server via communicator) in its run() method. Listening address/port configured via env vars. SDK provides lifecycle and potentially MCP decorators/integration.
Reasoning Types (Simple, BDI, etc.):
Implemented entirely within the BaseAgent subclass (agent.py). SDK remains agnostic.
Optional SDK integration hooks/bases (BdiAgent) can ease integration (Prompt 4.1).
Reasoning parameters configured via agent env vars.
Project-specific reasoning helpers can live in extensions/ or shared/.

8. CLI Tooling (simplemas CLI)
A command-line interface to streamline the developer workflow:
simplemas init <project_name>: Scaffolds the standard application directory structure and a basic simplemas_project.yml. Supports templates (e.g., --template=mcp-server).
simplemas validate: Parses simplemas_project.yml, checks syntax, verifies agent paths exist.
simplemas list agents: Lists agents defined in simplemas_project.yml.
simplemas run <agent_name>: Convenience command to run a specific agent defined in the project (loads config context).
(Future) simplemas deps: Installs external SimpleMas package dependencies listed in simplemas_project.yml.
(Separate Tool) simplemas-deploy: See Future Considerations (9.2).

9. Other

9.1. SDK Enhancements:
Full MCP Support: Implement McpStdioCommunicator, McpSseCommunicator (client/server). Add SDK helpers/decorators (@mcp_tool, etc.) integrating cleanly with BaseAgent (or McpAgent). Integrate MCP Sampling. Refactor/remove McpClientAdapter.

Formalize Communicator Plugin System: Implement robust discovery (entry points + extension_paths) and configuration.

Add More Communicators: gRPC, Message Queues (RabbitMQ/Redis).

Orchestration Pattern Helpers: Optional modules (simple_mas.patterns) for Orchestrator-Worker, Chaining, Routing.

BDI/Reasoning Integration: Optional hooks or base classes (BdiAgent) for easier integration with external libraries.

Testing Utilities: MockCommunicator, Agent Test Harness (simple_mas.testing).

Storage/Content System Pluggability: Explore BaseStorage abstraction.

Configuration Enhancement: Implement reading from config/*.yml based on SIMPLEMAS_ENV.

9.2. Application & Tooling Enhancements:
Implement simplemas CLI: init, validate, list, run.

Deployment Configuration Generator (simplemas-deploy Tool): Standalone tool reads simplemas.deploy.yaml metadata from agents (defined in simplemas_project.yml) and generates docker-compose.yml / Kubernetes manifests, automating networking/config injection.

Basic Dockerfile Helper: Command within simplemas-deploy (or main CLI) to generate standard Dockerfiles.

External Package Management: Implement simplemas deps and dependency resolution based on simplemas_project.yml.

9.3. Documentation: Continuous improvement of user guides, tutorials, API references, and contribution guidelines. Establish clear docstring policy (e.g., Google Style).
