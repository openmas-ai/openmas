# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
# Environments to run when 'tox' is invoked without arguments.
# Includes linting, the default python tests, optional dependency tests,
# an example test, and coverage.
envlist = lint, py310, py310-mcp, py310-grpc, py310-mqtt, example-00-hello-agent, coverage
isolated_build = True
skipsdist = False

[testenv]
# Base environment for running tests
description = Run the core framework unit tests and core integration tests
# Install the package in editable mode with 'dev' extras (includes pytest, etc.)
deps =
    -e .[dev]
# Allow pytest to be run
allowlist_externals =
    pytest
# Run pytest on unit tests and core integration tests
# {posargs} allows passing extra arguments to pytest via tox (e.g., tox -e py310 -- -k "test_something")
commands =
    pytest {toxinidir}/tests/unit {toxinidir}/tests/integration/core {posargs}

[testenv:lint]
description = Run linters, formatters (check mode), and type checker across the codebase
# Install the package with 'dev' extras PLUS specific mypy dependencies
deps =
    -e .[dev]
    # Mypy dependencies needed for type checking external libraries
    pydantic>=2.5.0
    types-requests>=2.31.0.2
    types-PyYAML>=6.0.12
    types-paho-mqtt>=1.6.0
    # Add other types-* packages if mypy complains about missing types
allowlist_externals =
    black
    isort
    flake8
    mypy
# Commands to run the checks
commands =
    black .
    isort .
    # Run the linter on source, tests, and examples
    flake8 {toxinidir}/src {toxinidir}/tests {toxinidir}/examples
    # Run the type checker on source, tests, and examples, using the config file
    mypy --config-file=mypy.ini {toxinidir}/src {toxinidir}/tests {toxinidir}/examples

[testenv:py310-mcp]
description = Run integration tests for MCP with MCP dependencies installed
# Install the package itself in editable mode, along with dev extras, mcp extra, and SSE requirements (uvicorn, aiohttp)
deps =
    -e .[dev,mcp] # Install local package with dev and mcp extras
    # Explicit SSE dependencies needed for tests/server
    uvicorn>=0.34.0
    aiohttp>=3.9.0  # For SSE integration tests
    sse-starlette>=2.3.3 # Explicitly add sse-starlette
allowlist_externals =
    pytest
# Tox will automatically install dependencies listed in 'deps'
commands =
    # Run the MCP integration tests, selecting by marker
    pytest -m mcp {posargs:{toxinidir}/tests/integration/mcp} -v

[testenv:py310-grpc]
description = Run integration tests for gRPC with gRPC dependencies installed
# Install dev extras + grpc extra
deps =
    -e .[dev,grpc]
allowlist_externals =
    pytest
# Run pytest only on the grpc integration tests, selecting with marker -m grpc
commands =
    pytest {toxinidir}/tests/integration/grpc -m grpc {posargs}

[testenv:py310-mqtt]
description = Run integration tests for MQTT with MQTT dependencies installed
# Install dev extras + mqtt extra
deps =
    -e .[dev,mqtt]
allowlist_externals =
    pytest
# Run pytest only on the mqtt integration tests, selecting with marker -m mqtt
commands =
    pytest {toxinidir}/tests/integration/mqtt -m mqtt {posargs}

[testenv:example-00-hello-agent]
description = Test the 00_hello_agent/hello_agent_example
deps =
    # Install the framework itself in editable mode
    -e .
    # Install the example's specific dependencies
    -r {toxinidir}/examples/00_hello_agent/hello_agent_example/requirements.txt
allowlist_externals =
    pytest
# Change directory into the example folder before running tests
changedir = {toxinidir}/examples/00_hello_agent/hello_agent_example
# Run the example's test file
commands =
    pytest test_example.py {posargs}

[testenv:coverage]
description = Run all tests with all optional dependencies installed and generate coverage report
# Install dev extras + all optional extras
deps =
    -e .[dev,all]
allowlist_externals =
    pytest
# Run pytest across all tests, generate coverage report for the src/openmas directory
commands =
    pytest {toxinidir}/tests --cov=src/openmas --cov-report=term --cov-report=xml:coverage.xml {posargs}
