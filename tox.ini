# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
# Default environments to run when 'tox' is invoked without arguments.
# These cover linting, fast unit tests, and mocked integration tests.
envlist = lint, unit, integration-mock
isolated_build = True
skipsdist = False

[testenv]
# Base environment settings inherited by specific test environments
description = Base configuration for test environments
# Install the package in editable mode with 'dev' extras (includes pytest, etc.)
deps =
    -e .[dev]
# Allowlist external commands used in test environments
allowlist_externals =
    pytest
    # Add docker, docker-compose, mkdir here if needed for future integration test envs
# Commands are defined in specific environments below

[testenv:lint]
description = Run linters, formatters (check mode), and type checker across the codebase
# Install the package with 'dev' extras PLUS specific mypy dependencies
deps =
    -e .[dev]
    # Mypy dependencies needed for type checking external libraries
    pydantic>=2.5.0
    types-requests>=2.31.0.2
    types-PyYAML>=6.0.12
    types-paho-mqtt>=1.6.0
    # Add other types-* packages if mypy complains about missing types
allowlist_externals =
    black
    isort
    flake8
    mypy
# Commands to run the checks
commands =
    # Check formatting without making changes
    black . --check
    isort . --check
    # Run the linter on source, tests, and examples
    flake8 {toxinidir}/src {toxinidir}/tests {toxinidir}/examples
    # Run the type checker on source, tests, and examples, using the config file
    mypy --config-file=mypy.ini {toxinidir}/src {toxinidir}/tests {toxinidir}/examples

# The old [testenv:py310] is effectively replaced by the new [testenv:unit] and [testenv:integration-mock]
# [testenv:py310]
# description = Run the core framework unit tests and core integration tests (DEPRECATED - Use unit and integration-mock)
# deps = -e .[dev]
# allowlist_externals = pytest
# commands = pytest {toxinidir}/tests/unit {toxinidir}/tests/integration/core {posargs}

[testenv:unit]
description = Run all unit tests (fast, no external deps)
# Inherits deps and allowlist_externals from [testenv]
commands =
    pytest {toxinidir}/tests/unit {posargs}

[testenv:integration-mock]
description = Run integration tests using mocks (no real external services)
# Inherits deps and allowlist_externals from [testenv]
# Needs mcp dependencies for mocked MCP tests
deps =
    -e .[dev,mcp]
    # Explicit dependencies needed for mocked MCP tests (even if mocked, imports might be needed)
    httpx>=0.27.0
    aiohttp>=3.9.0
    uvicorn>=0.30.0
    sse-starlette>=2.3.3
commands =
    pytest {toxinidir}/tests/integration/core {toxinidir}/tests/integration/mcp/mock {posargs}

[testenv:integration-real-mcp]
description = Run REAL integration tests requiring MCP services/libs
deps =
    -e .[dev,mcp]
    # Dependencies needed to run the MCP server harness/client for real tests
    httpx>=0.27.0
    aiohttp>=3.9.0
    uvicorn>=0.30.0
    sse-starlette>=2.3.3
# Allowlist external commands needed for potential service management
allowlist_externals =
    pytest
    # Example: python # If running a server script
    # Example: docker
# commands_pre =
    # Example: Start a local MCP server script or Docker container here if needed for CI
    # python src/mcp_server_example.py &
    # sleep 5 # Wait for server to start
commands =
    pytest {toxinidir}/tests/integration/mcp/real {posargs}
# commands_post =
    # Example: Stop the server/container
    # pkill -f src/mcp_server_example.py
    # docker stop mcp-server-container

[testenv:integration-real-grpc]
description = Run REAL integration tests requiring gRPC services/libs
deps =
    -e .[dev,grpc]
# Allowlist external commands needed for potential service management
allowlist_externals =
    pytest
    # Example: docker
# commands_pre =
    # Example: Start a gRPC service/container
commands =
    pytest {toxinidir}/tests/integration/grpc {posargs}
# commands_post =
    # Example: Stop the gRPC service/container

[testenv:integration-real-mqtt]
description = Run REAL integration tests requiring MQTT broker
deps =
    -e .[dev,mqtt]
# Allowlist external commands needed for potential service management
allowlist_externals =
    pytest
    docker # For managing the MQTT broker container
# commands_pre =
    # Example: Start an MQTT broker using Docker for CI
    # docker run -d -p 1883:1883 --name test-mosquitto eclipse-mosquitto:latest
    # sleep 5 # Wait for broker to start
commands =
    pytest {toxinidir}/tests/integration/mqtt {posargs}
# commands_post =
    # Example: Stop and remove the MQTT broker container
    # docker stop test-mosquitto
    # docker rm test-mosquitto

# The following integration environments will be refactored or redefined later
# to potentially use real services in CI contexts.
# [testenv:py310-mcp]
# description = Run integration tests for MCP with MCP dependencies installed (DEPRECATED/TBR)
# deps =
#     -e .[dev,mcp]
#     httpx>=0.27.0
#     aiohttp>=3.9.0
#     uvicorn>=0.30.0
#     sse-starlette>=2.3.3
# allowlist_externals = pytest
# commands = pytest -m mcp {posargs:{toxinidir}/tests/integration/mcp} -v
#
# [testenv:py310-grpc]
# description = Run integration tests for gRPC with gRPC dependencies installed (DEPRECATED/TBR)
# deps = -e .[dev,grpc]
# allowlist_externals = pytest
# commands = pytest {toxinidir}/tests/integration/grpc -m grpc {posargs}
#
# [testenv:py310-mqtt]
# description = Run integration tests for MQTT with MQTT dependencies installed (DEPRECATED/TBR)
# deps = -e .[dev,mqtt]
# allowlist_externals = pytest
# commands = pytest {toxinidir}/tests/integration/mqtt -m mqtt {posargs}

[testenv:example-00a-hello-single]
description = Run the single hello world agent example
changedir = examples/00a_hello_agent_single
deps =
    -e .[all]  # Install openmas with all extras
allowlist_externals =
    openmas
commands =
    openmas run hello_agent_single

[testenv:coverage]
description = Run coverage report across unit and mock integration tests
# NOTE: This currently runs ALL tests, including potentially non-mocked ones.
# It might need adjustment based on the final structure for CI vs local coverage.
deps =
    -e .[dev,all] # Needs 'all' extras to ensure code using optional deps is loaded
allowlist_externals =
    pytest
# Run pytest across specific fast/mocked test directories, generate coverage report for the src/openmas directory
commands =
    pytest {toxinidir}/tests/unit {toxinidir}/tests/integration/core {toxinidir}/tests/integration/mcp/mock --cov=src/openmas --cov-report=term --cov-report=xml:coverage.xml --cov-fail-under=50 {posargs}
