# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
# Default environments to run when 'tox' is invoked without arguments.
# These cover linting, fast unit tests, and mocked integration tests.
envlist = lint, unit, integration-mock
isolated_build = True
skipsdist = False

[testenv]
# Base environment settings inherited by specific test environments
description = Base configuration for test environments
# Use Poetry for installation via 'poetry install'
# This keeps dependencies DRY by using what's defined in pyproject.toml
commands_pre =
    poetry install --with dev {env:TOX_EXTRAS:}
# Allowlist external commands used in test environments
allowlist_externals =
    pytest
    poetry
    mkdocs
    openmas
    docker
    find
    xargs
    python
# Commands are defined in specific environments below

[testenv:lint]
description = Run linters, formatters (check mode), and type checker across the codebase
# No extra dependencies needed, just dev dependencies from poetry
# which include all the linting tools
commands =
    # Check formatting without making changes
    python -m black . --check
    python -m isort . --check
    # Run the linter on source, tests, and examples
    python -m flake8 {toxinidir}/src {toxinidir}/tests {toxinidir}/examples
    # Run the type checker on source and tests
    python -m mypy --config-file=mypy.ini {toxinidir}/src {toxinidir}/tests
    # Run type checker on all example directories individually (to avoid namespace conflicts)
    python {toxinidir}/scripts/run_mypy_on_examples.py

[testenv:unit]
description = Run all unit tests (fast, no external deps)
commands =
    pytest {toxinidir}/tests/unit {posargs}

[testenv:integration-mock]
description = Run integration tests using mocks (no real external services)
setenv =
    TOX_EXTRAS = --extras mcp
commands =
    pytest {toxinidir}/tests/integration/core {toxinidir}/tests/integration/mcp/mock {posargs}

[testenv:integration-real-mcp]
description = Run REAL integration tests requiring MCP services/libs
setenv =
    TOX_EXTRAS = --extras mcp
commands =
    # Automatically include the --run-real-mcp flag to avoid redundant specification
    pytest {toxinidir}/tests/integration/mcp/real --run-real-mcp -v {posargs}

[testenv:integration-real-grpc]
description = Run REAL integration tests requiring gRPC services/libs
setenv =
    TOX_EXTRAS = --extras grpc
commands =
    pytest {toxinidir}/tests/integration/grpc {posargs}

[testenv:integration-real-mqtt]
description = Run REAL integration tests requiring MQTT broker
setenv =
    TOX_EXTRAS = --extras mqtt
commands =
    pytest {toxinidir}/tests/integration/mqtt {posargs}

[testenv:example-00-hello-agent-00-single]
description = Run the single hello world agent example
changedir = examples/example_00_hello_agent/00_single
setenv =
    TOX_EXTRAS = --extras all
commands =
    openmas run hello_agent_single

[testenv:example-00-hello-agent-01-multi-mock]
description = Run the two-agent hello world mock example automated test using AgentHarness
changedir = examples/example_00_hello_agent/01_multi_mock
setenv =
    TOX_EXTRAS = --extras all
commands =
    pytest test_example.py

[testenv:example-03-patterns-01-agent-chaining]
description = Run the agent chaining example automated test
changedir = examples/example_03_patterns/01_agent_chaining
setenv =
    TOX_EXTRAS = --extras all
commands =
    pytest test_example.py

[testenv:example-08-mcp-sse-tool-call]
description = Run the MCP SSE tool call example automated test
changedir = examples/example_08_mcp/01_mcp_sse_tool_call
setenv =
    TOX_EXTRAS = --extras mcp
commands =
    pytest test_example.py

[testenv:example-08-mcp-stdio-tool-call]
description = Run the MCP stdio tool call example automated test
changedir = examples/example_08_mcp/02_mcp_stdio_tool_call
setenv =
    TOX_EXTRAS = --extras mcp
commands =
    pytest test_example.py

[testenv:example-09-prompt-sampling]
description = Run the prompt & sampling integration example automated test
changedir = examples/example_09_prompt_sampling/00_minimal
setenv =
    TOX_EXTRAS = --extras all
commands =
    pytest test_example.py

[testenv:coverage]
description = Run coverage report across unit and mock integration tests
setenv =
    TOX_EXTRAS = --extras all
    SKIP_PROTO_GEN = true
commands_pre =
    # Regenerate protobuf files using the dedicated script to ensure imports are fixed
    python src/openmas/communication/grpc/generate_proto.py
    poetry install --with dev {env:TOX_EXTRAS:}
commands =
    # Run both unit and integration tests with coverage reporting
    # Keep the --cov-fail-under threshold reasonably achievable at 70% for now
    # Future improvements should raise this to 80% for MCP components
    pytest {toxinidir}/tests/unit {toxinidir}/tests/integration/core {toxinidir}/tests/integration/mcp/mock \
    --cov=src/openmas --cov-report=term --cov-report=xml:coverage.xml --cov-fail-under=70 {posargs}

[testenv:coverage-mcp]
description = Run coverage report focused specifically on MCP components
setenv =
    TOX_EXTRAS = --extras mcp
commands =
    # Targeted coverage for MCP components
    # Focusing just on MCP code allows for more detailed coverage analysis
    pytest {toxinidir}/tests/unit/communication/mcp {toxinidir}/tests/integration/mcp/mock \
    --cov=src/openmas/communication/mcp --cov-report=term --cov-report=xml:mcp-coverage.xml --cov-fail-under=70 {posargs}

[testenv:docs]
description = Build the documentation using MkDocs.
commands_pre =
    poetry install --with dev
commands =
    mkdocs build --clean --strict

[testenv:mkdocs-check]
description = Test if documentation builds correctly (without publishing).
commands_pre =
    poetry install --with dev
commands =
    python -m build --wheel
    mkdocs build --clean --strict

[testenv:all-tests]
description = Run all tests (unit, integration, examples)
setenv =
    TOX_EXTRAS = --extras all
commands =
    # Run unit tests
    pytest {toxinidir}/tests/unit
    # Run integration tests with mocks
    pytest {toxinidir}/tests/integration/core {toxinidir}/tests/integration/mcp/mock
    # Run example tests
    pytest {toxinidir}/examples/example_00_hello_agent/01_multi_mock/test_example.py
    pytest {toxinidir}/examples/example_08_mcp/02_mcp_stdio_tool_call/test_example.py
    pytest {toxinidir}/examples/example_03_patterns/01_agent_chaining/test_example.py
    # Note: Real integration tests are not included as they require external services
    # Run them separately with: tox -e integration-real-mcp, integration-real-grpc, integration-real-mqtt
