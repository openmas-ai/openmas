name: example_08_mcp_stdio_tool_call
version: 0.1.0
description: "Example demonstrating MCP tool calls over standard input/output (stdio)"

# Define the available agents
agents:
  tool_provider: "agents/tool_provider"
  tool_user: "agents/tool_user"

# Default configuration for all agents
default_config:
  log_level: INFO

# Default communicator settings
communicator_defaults:
  type: mcp-stdio
  options:
    server_mode: false

# Agent-specific configurations
agent_configs:
  # Tool provider config - run in server mode to expose tools
  tool_provider:
    communicator_options:
      server_mode: true
      server_instructions: "A service that processes text using an MCP tool"

  # Tool user config - client mode with service URLs to find the tool provider
  tool_user:
    service_urls:
      # Service URL format for MCP stdio:
      #
      # "stdio:<command>" - The command to launch the provider process
      #
      # Available formats:
      # - "stdio:openmas" - Uses the OpenMAS CLI to launch the provider with default settings
      # - "stdio:openmas run tool_provider" - Explicit run command with agent name
      # - "stdio:openmas run --project /path/to/project tool_provider" - With project path
      # - "stdio:/path/to/executable" - Direct path to an executable
      # - "stdio:python -m my_module" - Custom Python module command
      #
      # In production, you might want to use more specific paths:
      # - "stdio:/usr/local/bin/openmas run tool_provider"
      # - "stdio:/path/to/venv/bin/python -m my_tool_provider"
      #
      # The service URL is used by the MCP stdio communicator to spawn the provider
      # process when the user agent starts. The provider process runs as a child
      # process of the user agent and communicates over standard input/output.
      tool_provider: "stdio:openmas"

# Dependencies configuration (for external packages)
# Examples:
# dependencies:
#   # - package: <org_or_user>/<package_name>  # Example: From official repo (Not implemented yet)
#   #   version: <version_spec>
#   # - git: <git_url>                         # Example: From Git repo (Implemented)
#   #   revision: <branch_tag_or_commit>       # Optional
#   # - local: <relative_path_to_package>      # Example: From local path (Not implemented yet)
